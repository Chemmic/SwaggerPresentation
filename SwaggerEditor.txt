openapi: 3.0.3
info:
  title: SoftwareEng mit OpenAPI 3.0
  description: |-
   Beispiel Swagger Server für die Software Engineering Vorlesung!
  termsOfService: http://swagger.io/terms/
  contact:
    email: Maxmustermann@Mustermann.de
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8081/api/v3
tags:
  - name: Dozenten
    description: Alles über die SoftwareEngeneering dozenten!
    externalDocs:
      description: mehr Informationen
      url: http://softeng.de
  - name: Test
    description: Nur ein Test
    externalDocs:
      description: Teste mehr
      url: http://test.de
paths:
  /test:
    post:
      tags:
        - Test
      summary: Ein simpler Test Endpunkt
      description: Dieser Endpunkt kann nichts
      operationId: addTest
      requestBody:
        description: Anlegen eines Tests
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Test Example
      responses:
        '200':
          description: Alles okay!
        '405':
          description: Falscher Test
  /dozent:
    post:
      tags:
        - Dozenten
      summary: Füge einen neuen Dozent/in hinzu
      description: Erstelle einen Dozent/in für die Vorlesung Software Engineering
      operationId: addDozent
      requestBody:
        description: Erstelle einen neuen Dozent/in
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dozent'
          application/xml:
            schema:
              $ref: '#/components/schemas/Dozent'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Dozent'
        required: true
      responses:
        '200':
          description: Dozent/in erstellt!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dozent'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Dozent'
        '405':
          description: Falsche Eingabe!
  /dozent/findeNachStatus:
    get:
      tags:
        - Dozenten
      summary: Finde Dozent/in nach Status
      description: Es können mehrere Statuse angegeben werden, mit Komma getrennt.
      operationId: findDozentByStatus
      parameters:
        - name: status
          in: query
          description: Status Werte welche zum Filtern genutzt werden
          required: false
          explode: true
          schema:
            type: string
            default: aktiv
            enum:
              - aktiv
              - faul
      responses:
        '200':
          description: Erfolgreiche Suche
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dozent'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dozent'
        '400':
          description: Falsche Status Eingabe

  /dozent/{dozentId}:
    get:
      tags:
        - Dozenten
      summary: Finde einen Dozenten/in mit seiner ID
      description: Gibt einen Dozent/in zurück
      operationId: getDozentById
      parameters:
        - name: dozentId
          in: path
          description: ID vom Dozent/in
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Erfolgreiche Suche
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dozent'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Dozent'
        '400':
          description: Falsches ID Format
        '404':
          description: Dozent nicht gefunden

    put:
      tags:
        - Dozenten
      summary: Update einen Dozenten
      description: ''
      operationId: updateDozentWithForm
      parameters:
        - name: dozentId
          in: path
          description: ID des Dozent/in der/die geupdated werden soll
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name des Dozent/in der/die geupdated werden soll
          schema:
            type: string
        - name: status
          in: query
          description: Status des Dozent/in der/die geupdated werden soll
          schema:
            type: string
      responses:
        '405':
          description: Falsche Eingabe
    delete:
      tags:
        - Dozenten
      summary: Entferne einen Dozenten
      description: Entferne Dozent/in
      operationId: deleteDozent
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: dozentId
          in: path
          description: Dozent id der/die gelöscht werden soll
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Falsche/r Dozent/in

  
  
components:
  schemas:
    Addresse:
      type: object
      properties:
        Straße:
          type: string
          example: Erzbergerstraße 121
        Stadt:
          type: string
          example: Karlsruhe
        Bundesland:
          type: string
          example: Baden-Württemberg
        Postleitzahl:
          type: string
          example: '76133'
      xml:
        name: address
    Uni:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: DHBW Karlsruhe
        Addresse:
          $ref: '#/components/schemas/Addresse'
      xml:
        name: Uni

    
    Dozent:
      required:
        - name
        - Uni
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: nuo li
        Uni:
          $ref: '#/components/schemas/Uni'
        status:
          type: string
          description: Ist der/die Dozent/in aktiv am lehren
          enum:
            - aktiv
            - faul
      xml:
        name: Dozent
    
  requestBodies:
    Dozent:
      description: Ein Dozent/in der/die lehren möchte
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Dozent'
        application/xml:
          schema:
            $ref: '#/components/schemas/Dozent'

