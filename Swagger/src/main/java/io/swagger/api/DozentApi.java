/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.42).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Dozent;
import io.swagger.model.Uni;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-04-23T20:23:17.581651531Z[GMT]")
@Validated
public interface DozentApi {

    @Operation(summary = "Füge einen neuen Dozent/in hinzu", description = "Erstelle einen Dozent/in für die Vorlesung Software Engineering", tags={ "Dozenten" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Dozent/in erstellt!", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Dozent.class))),
        
        @ApiResponse(responseCode = "405", description = "Falsche Eingabe!") })
    @RequestMapping(value = "/dozent",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.POST)
    ResponseEntity<Dozent> addDozent(@Parameter(in = ParameterIn.DEFAULT, description = "Erstelle einen neuen Dozent/in", required=true, schema=@Schema()) @Valid @RequestBody Dozent body);


    @Operation(summary = "Entferne einen Dozenten", description = "Entferne Dozent/in", tags={ "Dozenten" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Falsche/r Dozent/in") })
    @RequestMapping(value = "/dozent/{dozentId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteDozent(@Parameter(in = ParameterIn.PATH, description = "Dozent id der/die gelöscht werden soll", required=true, schema=@Schema()) @PathVariable("dozentId") Long dozentId, @Parameter(in = ParameterIn.HEADER, description = "" ,schema=@Schema()) @RequestHeader(value="api_key", required=false) String apiKey);


    @Operation(summary = "Finde Dozent/in nach Status", description = "Es können mehrere Statuse angegeben werden, mit Komma getrennt.", tags={ "Dozenten" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Erfolgreiche Suche", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Dozent.class)))),
        
        @ApiResponse(responseCode = "400", description = "Falsche Status Eingabe") })
    @RequestMapping(value = "/dozent/findeNachStatus",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Dozent>> findDozentByStatus(@Parameter(in = ParameterIn.QUERY, description = "Status Werte welche zum Filtern genutzt werden" ,schema=@Schema(allowableValues={ "aktiv", "faul" }
, defaultValue="aktiv")) @Valid @RequestParam(value = "status", required = false, defaultValue="aktiv") String status);


    @Operation(summary = "Finde einen Dozenten/in mit seiner ID", description = "Gibt einen Dozent/in zurück", tags={ "Dozenten" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Erfolgreiche Suche", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Dozent.class))),
        
        @ApiResponse(responseCode = "400", description = "Falsches ID Format"),
        
        @ApiResponse(responseCode = "404", description = "Dozent nicht gefunden") })
    @RequestMapping(value = "/dozent/{dozentId}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Dozent> getDozentById(@Parameter(in = ParameterIn.PATH, description = "ID vom Dozent/in", required=true, schema=@Schema()) @PathVariable("dozentId") Long dozentId);


    @Operation(summary = "Update einen Dozenten", description = "", tags={ "Dozenten" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "405", description = "Falsche Eingabe") })
    @RequestMapping(value = "/dozent/{dozentId}",
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateDozentWithForm(@Parameter(in = ParameterIn.PATH, description = "ID des Dozent/in der/die geupdated werden soll", required=true, schema=@Schema()) @PathVariable("dozentId") Long dozentId, @Parameter(in = ParameterIn.QUERY, description = "Name des Dozent/in der/die geupdated werden soll" ,schema=@Schema()) @Valid @RequestParam(value = "name", required = false) String name, @Parameter(in = ParameterIn.QUERY, description = "Status des Dozent/in der/die geupdated werden soll" ,schema=@Schema()) @Valid @RequestParam(value = "status", required = false) String status);

}

